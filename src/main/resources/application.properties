#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
#spring.jpa.properties.hibernate.hbm2ddl.delimiter=;


spring.jpa.database=POSTGRESQL
spring.datasource.url=jdbc:postgresql://localhost:5432/financeiro_api?useSSL=false&autoreconnect=true
spring.datasource.username=postgres
spring.datasource.password=Kill4r3e2w1q#

spring.datasource.driver-class-name=org.postgresql.Driver
spring.sql.init.platform=postgres

spring.jpa.show-sql=true

spring.profiles.active=basic-security

spring.profiles.group.prod=oauth-security

spring.flyway.baseline-on-migrate = true
#spring.flyway.locations=migration
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=validate
spring.session.store-type=none

#spring.jpa.hibernate.ddl-auto=create
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = true

spring.security.oauth2.resourceserver.opaquetoken.introspection-uri=http://localhost:8080/financeiro_api/oauth/check_token
spring.security.oauth2.resourceserver.opaquetoken.client-id=angular
spring.security.oauth2.resourceserver.opaquetoken.client-secret=@ngul@r0

spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

#Configuracao de upload de arquivo
spring.servlet.multipart.max-file-size=10000KB
spring.servlet.multipart.max-request-size=10000KB
spring.servlet.multipart.enabled=true

#Configuracao de compressao de dados para performace
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json
server.compression.min-response-size=1024
server.http2.enabled=true

#Configuracao de codificacao
server.servlet.encoding.charset=UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force=true
server.servlet.encoding.force-request=true
server.servlet.encoding.force-response=true


#POOL de conexao 
spring.datasource.type=com.zaxxer.hikari.HikariDataSource

#Numero maximo de milisegundos que um cliente aguardara por uma conexao
spring.datasource.hikari.connection-timeout=20000

#Numero minimo de conexao inativas mantidas pelo HikariCP em um conjunto de conexoes
spring.datasource.hikari.minimum-idle=90

#Maximo de pool de conexao
spring.datasource.hikari.maximum-pool-size=150

#Tempo ociosos para conexao
spring.datasource.hikari.idle-timeout=10000

spring.datasource.hikari.pool-name=PoolHikari
spring.datasource.dbcp2.pool-prepared-statements=true
spring.datasource.dbcp2.max-open-prepared-statements=550

#salvando dados no banco automaticamente
spring.datasource.hikari.auto-commit=false
server.servlet.session.timeout=240m
spring.transaction.rollback-on-commit-failure=true
spring.jpa.properties.hibernate.jdbc.batch_size=4
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
server.tomcat.max-connections=50000
server.tomcat.threads.min-spare=1000
spring.session.jdbc.cleanup-cron=0 0 4 * * *

spring.mvc.static-path-pattern=/resoures/static/**


spring.jackson.deserialization.fail-on-unknown-properties=true



